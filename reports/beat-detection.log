Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
start_seconds = 100 # time since the start of the segment at which to begin extracting data
no_seconds_to_load = 20
segment_metadata = wfdb.rdheader(record_name=rel_segment_name, pn_dir=rel_segment_dir) 
print("Metadata loaded from segment: {}".format(rel_segment_name))
fs = round(segment_metadata.fs)
sampfrom = fs*start_seconds
sampto = fs*(start_seconds+no_seconds_to_load)
segment_data = wfdb.rdrecord(record_name=rel_segment_name, sampfrom=sampfrom, sampto=sampto, pn_dir=rel_segment_dir) 
print("{} seconds of data extracted from: {}".format(no_seconds_to_load, rel_segment_name))
abp_col = []
ppg_col = []
for sig_no in range(0,len(segment_data.sig_name)):
    if "ABP" in segment_data.sig_name[sig_no]:
        abp_col = sig_no
    if "Pleth" in segment_data.sig_name[sig_no]:
        ppg_col = sig_no
abp = segment_data.p_signal[:,abp_col]
ppg = segment_data.p_signal[:,ppg_col]
fs = segment_data.fs
print("Extracted the ABP signal from column {} of the matrix of waveform data at {:.1f} Hz.".format(abp_col, fs))
print("Extracted the PPG signal from column {} of the matrix of waveform data at {:.1f} Hz.".format(ppg_col, fs))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mOSError[0m                                   Traceback (most recent call last)
Input [0;32mIn [3][0m, in [0;36m<cell line: 8>[0;34m()[0m
[1;32m      6[0m sampfrom [38;5;241m=[39m fs[38;5;241m*[39mstart_seconds
[1;32m      7[0m sampto [38;5;241m=[39m fs[38;5;241m*[39m(start_seconds[38;5;241m+[39mno_seconds_to_load)
[0;32m----> 8[0m segment_data [38;5;241m=[39m [43mwfdb[49m[38;5;241;43m.[39;49m[43mrdrecord[49m[43m([49m[43mrecord_name[49m[38;5;241;43m=[39;49m[43mrel_segment_name[49m[43m,[49m[43m [49m[43msampfrom[49m[38;5;241;43m=[39;49m[43msampfrom[49m[43m,[49m[43m [49m[43msampto[49m[38;5;241;43m=[39;49m[43msampto[49m[43m,[49m[43m [49m[43mpn_dir[49m[38;5;241;43m=[39;49m[43mrel_segment_dir[49m[43m)[49m 
[1;32m      9[0m [38;5;28mprint[39m([38;5;124m"[39m[38;5;132;01m{}[39;00m[38;5;124m seconds of data extracted from: [39m[38;5;132;01m{}[39;00m[38;5;124m"[39m[38;5;241m.[39mformat(no_seconds_to_load, rel_segment_name))
[1;32m     10[0m abp_col [38;5;241m=[39m []

File [0;32m/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/wfdb/io/record.py:2065[0m, in [0;36mrdrecord[0;34m(record_name, sampfrom, sampto, channels, physical, pn_dir, m2s, smooth_frames, ignore_skew, return_res, force_channels, channel_names, warn_empty)[0m
[1;32m   2062[0m no_file [38;5;241m=[39m [38;5;28;01mFalse[39;00m
[1;32m   2063[0m sig_data [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m-> 2065[0m record[38;5;241m.[39me_d_signal [38;5;241m=[39m [43m_signal[49m[38;5;241;43m.[39;49m[43m_rd_segment[49m[43m([49m
[1;32m   2066[0m [43m    [49m[43mfile_name[49m[38;5;241;43m=[39;49m[43mrecord[49m[38;5;241;43m.[39;49m[43mfile_name[49m[43m,[49m
[1;32m   2067[0m [43m    [49m[43mdir_name[49m[38;5;241;43m=[39;49m[43mdir_name[49m[43m,[49m
[1;32m   2068[0m [43m    [49m[43mpn_dir[49m[38;5;241;43m=[39;49m[43mpn_dir[49m[43m,[49m
[1;32m   2069[0m [43m    [49m[43mfmt[49m[38;5;241;43m=[39;49m[43mrecord[49m[38;5;241;43m.[39;49m[43mfmt[49m[43m,[49m
[1;32m   2070[0m [43m    [49m[43mn_sig[49m[38;5;241;43m=[39;49m[43mrecord[49m[38;5;241;43m.[39;49m[43mn_sig[49m[43m,[49m
[1;32m   2071[0m [43m    [49m[43msig_len[49m[38;5;241;43m=[39;49m[43mrecord[49m[38;5;241;43m.[39;49m[43msig_len[49m[43m,[49m
[1;32m   2072[0m [43m    [49m[43mbyte_offset[49m[38;5;241;43m=[39;49m[43mrecord[49m[38;5;241;43m.[39;49m[43mbyte_offset[49m[43m,[49m
[1;32m   2073[0m [43m    [49m[43msamps_per_frame[49m[38;5;241;43m=[39;49m[43mrecord[49m[38;5;241;43m.[39;49m[43msamps_per_frame[49m[43m,[49m
[1;32m   2074[0m [43m    [49m[43mskew[49m[38;5;241;43m=[39;49m[43mrecord[49m[38;5;241;43m.[39;49m[43mskew[49m[43m,[49m
[1;32m   2075[0m [43m    [49m[43minit_value[49m[38;5;241;43m=[39;49m[43mrecord[49m[38;5;241;43m.[39;49m[43minit_value[49m[43m,[49m
[1;32m   2076[0m [43m    [49m[43msampfrom[49m[38;5;241;43m=[39;49m[43msampfrom[49m[43m,[49m
[1;32m   2077[0m [43m    [49m[43msampto[49m[38;5;241;43m=[39;49m[43msampto[49m[43m,[49m
[1;32m   2078[0m [43m    [49m[43mchannels[49m[38;5;241;43m=[39;49m[43mchannels[49m[43m,[49m
[1;32m   2079[0m [43m    [49m[43mignore_skew[49m[38;5;241;43m=[39;49m[43mignore_skew[49m[43m,[49m
[1;32m   2080[0m [43m    [49m[43mno_file[49m[38;5;241;43m=[39;49m[43mno_file[49m[43m,[49m
[1;32m   2081[0m [43m    [49m[43msig_data[49m[38;5;241;43m=[39;49m[43msig_data[49m[43m,[49m
[1;32m   2082[0m [43m    [49m[43mreturn_res[49m[38;5;241;43m=[39;49m[43mreturn_res[49m[43m,[49m
[1;32m   2083[0m [43m[49m[43m)[49m
[1;32m   2085[0m [38;5;66;03m# Only 1 sample/frame, or frames are smoothed. Return uniform numpy array[39;00m
[1;32m   2086[0m [38;5;28;01mif[39;00m smooth_frames:
[1;32m   2087[0m     [38;5;66;03m# Arrange/edit the object fields to reflect user channel[39;00m
[1;32m   2088[0m     [38;5;66;03m# and/or signal range input[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/wfdb/io/_signal.py:1202[0m, in [0;36m_rd_segment[0;34m(file_name, dir_name, pn_dir, fmt, n_sig, sig_len, byte_offset, samps_per_frame, skew, init_value, sampfrom, sampto, channels, ignore_skew, no_file, sig_data, return_res)[0m
[1;32m   1198[0m signals [38;5;241m=[39m [[38;5;28;01mNone[39;00m] [38;5;241m*[39m [38;5;28mlen[39m(channels)
[1;32m   1200[0m [38;5;28;01mfor[39;00m fn [38;5;129;01min[39;00m w_file_name:
[1;32m   1201[0m     [38;5;66;03m# Get the list of all signals contained in the dat file[39;00m
[0;32m-> 1202[0m     datsignals [38;5;241m=[39m [43m_rd_dat_signals[49m[43m([49m
[1;32m   1203[0m [43m        [49m[43mfile_name[49m[38;5;241;43m=[39;49m[43mfn[49m[43m,[49m
[1;32m   1204[0m [43m        [49m[43mdir_name[49m[38;5;241;43m=[39;49m[43mdir_name[49m[43m,[49m
[1;32m   1205[0m [43m        [49m[43mpn_dir[49m[38;5;241;43m=[39;49m[43mpn_dir[49m[43m,[49m
[1;32m   1206[0m [43m        [49m[43mfmt[49m[38;5;241;43m=[39;49m[43mw_fmt[49m[43m[[49m[43mfn[49m[43m][49m[43m,[49m
[1;32m   1207[0m [43m        [49m[43mn_sig[49m[38;5;241;43m=[39;49m[38;5;28;43mlen[39;49m[43m([49m[43mdatchannel[49m[43m[[49m[43mfn[49m[43m][49m[43m)[49m[43m,[49m
[1;32m   1208[0m [43m        [49m[43msig_len[49m[38;5;241;43m=[39;49m[43msig_len[49m[43m,[49m
[1;32m   1209[0m [43m        [49m[43mbyte_offset[49m[38;5;241;43m=[39;49m[43mw_byte_offset[49m[43m[[49m[43mfn[49m[43m][49m[43m,[49m
[1;32m   1210[0m [43m        [49m[43msamps_per_frame[49m[38;5;241;43m=[39;49m[43mw_samps_per_frame[49m[43m[[49m[43mfn[49m[43m][49m[43m,[49m
[1;32m   1211[0m [43m        [49m[43mskew[49m[38;5;241;43m=[39;49m[43mw_skew[49m[43m[[49m[43mfn[49m[43m][49m[43m,[49m
[1;32m   1212[0m [43m        [49m[43minit_value[49m[38;5;241;43m=[39;49m[43mw_init_value[49m[43m[[49m[43mfn[49m[43m][49m[43m,[49m
[1;32m   1213[0m [43m        [49m[43msampfrom[49m[38;5;241;43m=[39;49m[43msampfrom[49m[43m,[49m
[1;32m   1214[0m [43m        [49m[43msampto[49m[38;5;241;43m=[39;49m[43msampto[49m[43m,[49m
[1;32m   1215[0m [43m        [49m[43mno_file[49m[38;5;241;43m=[39;49m[43mno_file[49m[43m,[49m
[1;32m   1216[0m [43m        [49m[43msig_data[49m[38;5;241;43m=[39;49m[43msig_data[49m[43m,[49m
[1;32m   1217[0m [43m    [49m[43m)[49m
[1;32m   1219[0m     [38;5;66;03m# Copy over the wanted signals[39;00m
[1;32m   1220[0m     [38;5;28;01mfor[39;00m cn [38;5;129;01min[39;00m [38;5;28mrange[39m([38;5;28mlen[39m(out_dat_channel[fn])):

File [0;32m/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/wfdb/io/_signal.py:1330[0m, in [0;36m_rd_dat_signals[0;34m(file_name, dir_name, pn_dir, fmt, n_sig, sig_len, byte_offset, samps_per_frame, skew, init_value, sampfrom, sampto, no_file, sig_data)[0m
[1;32m   1328[0m     data_to_read [38;5;241m=[39m sig_data
[1;32m   1329[0m [38;5;28;01melif[39;00m fmt [38;5;129;01min[39;00m COMPRESSED_FMTS:
[0;32m-> 1330[0m     data_to_read [38;5;241m=[39m [43m_rd_compressed_file[49m[43m([49m
[1;32m   1331[0m [43m        [49m[43mfile_name[49m[38;5;241;43m=[39;49m[43mfile_name[49m[43m,[49m
[1;32m   1332[0m [43m        [49m[43mdir_name[49m[38;5;241;43m=[39;49m[43mdir_name[49m[43m,[49m
[1;32m   1333[0m [43m        [49m[43mpn_dir[49m[38;5;241;43m=[39;49m[43mpn_dir[49m[43m,[49m
[1;32m   1334[0m [43m        [49m[43mfmt[49m[38;5;241;43m=[39;49m[43mfmt[49m[43m,[49m
[1;32m   1335[0m [43m        [49m[43msample_offset[49m[38;5;241;43m=[39;49m[43mbyte_offset[49m[43m,[49m
[1;32m   1336[0m [43m        [49m[43mn_sig[49m[38;5;241;43m=[39;49m[43mn_sig[49m[43m,[49m
[1;32m   1337[0m [43m        [49m[43msamps_per_frame[49m[38;5;241;43m=[39;49m[43msamps_per_frame[49m[43m,[49m
[1;32m   1338[0m [43m        [49m[43mstart_frame[49m[38;5;241;43m=[39;49m[43msampfrom[49m[43m,[49m
[1;32m   1339[0m [43m        [49m[43mend_frame[49m[38;5;241;43m=[39;49m[43msampto[49m[43m,[49m
[1;32m   1340[0m [43m    [49m[43m)[49m
[1;32m   1341[0m [38;5;28;01melse[39;00m:
[1;32m   1342[0m     data_to_read [38;5;241m=[39m _rd_dat_file(
[1;32m   1343[0m         file_name, dir_name, pn_dir, fmt, start_byte, n_read_samples
[1;32m   1344[0m     )

File [0;32m/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/wfdb/io/_signal.py:1828[0m, in [0;36m_rd_compressed_file[0;34m(file_name, dir_name, pn_dir, fmt, sample_offset, n_sig, samps_per_frame, start_frame, end_frame)[0m
[1;32m   1776[0m [38;5;28;01mdef[39;00m [38;5;21m_rd_compressed_file[39m(
[1;32m   1777[0m     file_name,
[1;32m   1778[0m     dir_name,
[0;32m   (...)[0m
[1;32m   1785[0m     end_frame,
[1;32m   1786[0m ):
[1;32m   1787[0m     [38;5;124;03m"""[39;00m
[1;32m   1788[0m [38;5;124;03m    Read data from a compressed file into a 1D numpy array.[39;00m
[1;32m   1789[0m 
[0;32m   (...)[0m
[1;32m   1826[0m 
[1;32m   1827[0m [38;5;124;03m    """[39;00m
[0;32m-> 1828[0m     [38;5;28;01mimport[39;00m [38;5;21;01msoundfile[39;00m
[1;32m   1830[0m     [38;5;28;01mif[39;00m [38;5;28many[39m(spf [38;5;241m!=[39m samps_per_frame[[38;5;241m0[39m] [38;5;28;01mfor[39;00m spf [38;5;129;01min[39;00m samps_per_frame):
[1;32m   1831[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m   1832[0m             [38;5;124m"[39m[38;5;124mAll channels in a FLAC signal file must have the same [39m[38;5;124m"[39m
[1;32m   1833[0m             [38;5;124m"[39m[38;5;124msampling rate and samples per frame[39m[38;5;124m"[39m
[1;32m   1834[0m         )

File [0;32m/opt/hostedtoolcache/Python/3.9.13/x64/lib/python3.9/site-packages/soundfile.py:142[0m, in [0;36m<module>[0;34m[0m
[1;32m    140[0m     _libname [38;5;241m=[39m _find_library([38;5;124m'[39m[38;5;124msndfile[39m[38;5;124m'[39m)
[1;32m    141[0m     [38;5;28;01mif[39;00m _libname [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 142[0m         [38;5;28;01mraise[39;00m [38;5;167;01mOSError[39;00m([38;5;124m'[39m[38;5;124msndfile library not found[39m[38;5;124m'[39m)
[1;32m    143[0m     _snd [38;5;241m=[39m _ffi[38;5;241m.[39mdlopen(_libname)
[1;32m    144[0m [38;5;28;01mexcept[39;00m [38;5;167;01mOSError[39;00m:

[0;31mOSError[0m: sndfile library not found
OSError: sndfile library not found

